substitutions:
  devicename: people_counter
  friendly_name: People Counter

esphome:
  name: $devicename
  platform: ESP8266
  board: nodemcuv2
  includes:
    - src/app.h
    - lib/Calibration/Calibration.h

  libraries:
    - file://../lib/Configuration/
    - file://../lib/Counter/
    - sparkfun/SparkFun VL53L1X 4m Laser Distance Sensor@^1.2.9

<<: !include common/common.yaml

globals:
  - id: cnt
    type: int
    restore_value: yes
    initial_value: "0"

# Enable logging
logger:
  level: DEBUG
  esp8266_store_log_strings_in_flash: False

#status_led:
#  pin:
#    number: D0
#    inverted: True

web_server:
  port: 80
  auth:
    username: admin
    password: "1248"

i2c:

switch:
  - platform: restart
    name: $friendly_name Restart

binary_sensor:
  - platform: status
    name: $friendly_name Status

  - platform: template
    name: $friendly_name photo sensor
    lambda: |-
      if (id(tof_distance_avg).state < DIST_THRESHOLD_MAX[1]) {
        // someone in the door
        return true;
      } else {
        // no one in the door
        return false;
      }
    filters:
      - delayed_off: 100ms

sensor:
  - platform: wifi_signal
    name: $friendly_name RSSI
    update_interval: 60s

  - platform: uptime
    name: $friendly_name Uptime

  - platform: custom
    lambda: |-
      auto people_counter = new PeopleCountSensor();
      App.register_component(people_counter);
      return {people_counter->people_sensor};
    sensors:
      - name: $friendly_name People
        id: people_count
        icon: "mdi:counter"
        accuracy_decimals: 0
        unit_of_measurement: "people"

  - platform: mqtt_subscribe
    name: "People reset"
    id: people_reset
    topic: $devicename/sensor/people/reset
    internal: true
    on_value:
      then:
        - lambda: |-
            resetCounter = 1;

  - platform: mqtt_subscribe
    name: "People set counter"
    id: people_set_counter
    topic: $devicename/sensor/people/set
    internal: true
    on_value:
      then:
        - lambda: |-
            id(cnt)=id(people_set_counter).state;
            forceSetValue=1;

  - platform: mqtt_subscribe
    name: "People recalibrate"
    id: people_recalibrate
    topic: $devicename/sensor/people/recalibrate
    internal: true
    on_value:
      then:
        - lambda: |-
            recalibrate = 1;

  - platform: template
    name: $friendly_name measured distance
    id: tof_distance
    accuracy_decimals: 0
    icon: "mdi:ruler"
    unit_of_measurement: "mm"
    update_interval: 1s
    lambda: |-
      return distance;
    filters:
      - delta: 100.0

  - platform: template
    name: tof distance avg
    id: tof_distance_avg
    accuracy_decimals: 0
    icon: "mdi:ruler"
    unit_of_measurement: "mm"
    internal: true
    update_interval: 0.1s
    lambda: |-
      return distance;
    filters:
      - sliding_window_moving_average:
          window_size: 10
          send_every: 10

  - platform: template
    name: $friendly_name threshold zone 0
    id: threshold_zone0
    accuracy_decimals: 0
    icon: "mdi:ruler"
    unit_of_measurement: "mm"
    lambda: |-
      return DIST_THRESHOLD_MAX[0];
  - platform: template
    name: $friendly_name threshold zone 1
    id: threshold_zone1
    accuracy_decimals: 0
    icon: "mdi:ruler"
    unit_of_measurement: "mm"
    update_interval: 60s
    lambda: |-
      return DIST_THRESHOLD_MAX[1];

text_sensor:
  - platform: template
    name: "$friendly_name Version"
    icon: mdi:git
    lambda: |-
      std::string version = ROODE_VERSION;
      return version;
